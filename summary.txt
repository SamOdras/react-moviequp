---- NOTE ----
1. Firestore Query : When we using firestore, it will return us two objects: reference and snapshot,
   of these objects, they can be either document or collection or version

2. QueryReference Object: This is reference the current database that we are querying it,
   we can get them by calling either 
   firestore.doc('/users/:userId');
   firestore.collections('/users');

3. Truth about QueryReference : it doesnt have the actual data from firebase,
   but it giving us a detail about it, or method to get snapshot object to get the real data

4. When we make a req like a get() or something, we will get the snapshotObject from 
   the referenceObject using the .get();

5. snapshot is only getting the data
6. MapDispathcToProps => Passing action creator to the react component ( This is one of two ways to pass )
---- TECHNIQUE -----

1. Importing with single base : 
   - import first with the base 
   - then without 
   - ex import firebase from 'firebase/app'
        import 'firebase/firestore'
        import 'firebase/auth';

2. Firebase Technique Auth : 
   - import firebase from firebase/app;
   - import firebase/firestore
     import firebase/auth
  
   - Then init the firebase 
      firebase.initializeApp(config)
   - define firebase auth : const auth = firebase.auth();
   - define provider : const provider = firebse.auth.GoogleAuthProvider();
   - custom the parameter : provider.setCustomParameters({ prompt: 'select_account' })
   - make the function : signInWithGoogle => auth.signInWithPopup(provider); then export it
   - export the firebase 
   - import the signInWithGoogle, then put it as a onClick in sigin in button
   - get the current user in the app.js with importing auth from firebase/util
   - use auth.onAuthChange(user => setState(user));
   - Then unMount it when it done

3. Create the database in firestore : 
   - get the doc : const userRef = firebase.doc();
   - get the data : const snapShot = userRef.get();
   - initializeTheData when snapShot.exist is false 
   - .... userRef.set({ dataGoesHere });

4. Create user profile database : 
   - Make the function that receive input data auth, if the data doesnt exist / have false value
   - return nothing if the parameter.exist have value true
   - make create the database with .set if the input value have false value
   - in App.js import auth from firebase 
   - Use onAuthStateChanged, it will return the changed state
   - Pass the props to the function that we made 

5. Applying multiple middleware on redux : 
   - Sederhananya kita memisahkan deklarasi store ke independent folder
   - () => { 
      import { createStore, applyMiddleware } from 'redux';
      import logger from 'redux-logger';

      import rootReducer from './root.reducer';

      const middlewares = [logger]; -> all the middle ware goes here 
      const store = createStore(rootReducer, applyMiddleware(...middlewares));
      export default store;
   }
